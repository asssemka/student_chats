package main

import (
	"log"
	"os"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/joho/godotenv"

	"dorm-chat-api/config"
	"dorm-chat-api/routes"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∞ Render –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É)
	_ = godotenv.Load()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
	db, err := config.InitDB()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ú–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
	if err := config.AutoMigrate(db); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –°–æ–∑–¥–∞—ë–º Fiber-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := fiber.New()

	// –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
	app.Use(logger.New())

	// –ß–∏—Ç–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	allowedOrigins := os.Getenv("ALLOWED_ORIGINS")
	if allowedOrigins == "" {
		allowedOrigins = "http://localhost:3000"
	}
	// Fiber —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
	allowedOrigins = strings.ReplaceAll(allowedOrigins, " ", "")

	app.Use(cors.New(cors.Config{
		AllowOrigins:     allowedOrigins,
		AllowMethods:     "GET,POST,PUT,DELETE,OPTIONS",
		AllowHeaders:     "Origin, Content-Type, Accept, Authorization",
		AllowCredentials: true,
	}))

	// –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç—ã
	routes.SetupRoutes(app, db)

	// Render –∑–∞–¥–∞—ë—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	log.Printf("üöÄ Go API —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–∞ :%s", port)
	log.Fatal(app.Listen(":" + port))
}

// package main

// import (
// 	"log"
// 	"os"
// 	"strings"

// 	"github.com/gofiber/fiber/v2"
// 	"github.com/gofiber/fiber/v2/middleware/cors"
// 	"github.com/gofiber/fiber/v2/middleware/logger"
// 	"github.com/joho/godotenv"

// 	"dorm-chat-api/config"
// 	"dorm-chat-api/routes"
// )

// func main() {
// 	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
// 	if err := godotenv.Load(); err != nil {
// 		log.Println("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
// 	}

// 	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
// 	db, err := config.InitDB()
// 	if err != nil {
// 		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
// 	}

// 	// –ú–∏–≥—Ä–∞—Ü–∏–∏
// 	if err := config.AutoMigrate(db); err != nil {
// 		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", err)
// 	}

// 	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fiber
// 	app := fiber.New()

// 	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
// 	app.Use(logger.New())

// 	// CORS –¥–ª—è Flutter Web –∏ React
// 	app.Use(cors.New(cors.Config{
// 		AllowOriginsFunc: func(origin string) bool {
// 			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—Ä–æ–Ω—Ç—ã
// 			allowed := []string{
// 				"http://localhost:3000", // React
// 				"http://127.0.0.1:3000",
// 				"http://localhost:54259", // Flutter Web (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç)
// 				"http://127.0.0.1:5500",
// 			}
// 			for _, o := range allowed {
// 				if origin == o {
// 					return true
// 				}
// 			}
// 			// –î–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ origins
// 			return strings.HasPrefix(origin, "http://localhost") || strings.HasPrefix(origin, "http://127.0.0.1")
// 		},
// 		AllowMethods:     "GET,POST,PUT,DELETE,OPTIONS",
// 		AllowHeaders:     "Origin, Content-Type, Accept, Authorization",
// 		AllowCredentials: true,
// 	}))

// 	// –†–æ—É—Ç—ã
// 	routes.SetupRoutes(app, db)

// 	// –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
// 	port := os.Getenv("PORT")
// 	if port == "" {
// 		port = "8080"
// 	}

// 	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä Go API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:%s", port)
// 	log.Fatal(app.Listen(":" + port))
// }
